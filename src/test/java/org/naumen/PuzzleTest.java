/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.naumen;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import java.util.LinkedList;


public class PuzzleTest {
    @Test public void testResolve() {
        Puzzle puzzle = new Puzzle();
        int[] res1 = puzzle.resolve(new int[] { 2, 1, 3, 4, 0, 5, 6, 7});
        assertEquals(res1.length, 7);
        int[] res2 = puzzle.resolve(new int[] { 0, 1, 2, 3, 4, 5, 6, 7 });
        assertEquals(res2.length, 18);
        assertEquals(res2[0], 2);
        int[] res3 = puzzle.resolve(new int[] { 1, 2, 3, 4, 0, 5, 6, 7});
        assertEquals(res3.length, 0);
    }

    @Test public void testReducer() {
        List<String> path = new LinkedList<>();
        path.add("1203");
        path.add("1023");
        path.add("0123");
        path.add("2301");

        int[] steps = Puzzle.reduce(path);
        assertEquals(steps.length, 3);
        assertEquals(steps[0], 2);
        assertEquals(steps[1], 1);
        assertEquals(steps[2], 2);
    }

    @Test public void testIndexOfSpot() {
        assertEquals(Puzzle.indexOfSpot("0134"), 0);
        assertEquals(Puzzle.indexOfSpot("334"), -1);
        assertEquals(Puzzle.indexOfSpot("330"), 2);
        assertEquals(Puzzle.indexOfSpot(Puzzle.pattern), 4);
        assertEquals(Puzzle.indexOfSpot(new Node[] {}), -1);
        assertEquals(
            Puzzle.indexOfSpot(
                new Node[] {
                    new Node(1, new int[] {}),
                    new Node(2, new int[] {}),
                    new Node(0, new int[] {}),
                }
            ),
            2
        );
    }

    @Test public void testGraph() {
        String input = "21340567";
        char[] elems = input.toCharArray();
        Node[] graph =  Puzzle.toGraph(input, Puzzle.pattern);
        for (int i = 0; i < graph.length; i++) {
            assertEquals(Character.getNumericValue(elems[i]), graph[i].getValue());
        }
        assertEquals(graph[0].getValue(), 2);
        assertEquals(graph[2].getArcs().length, 3);
        assertEquals(graph[0].getArcs()[1], 2);
    }

    @Test public void testSwap() {
        Node[] state = Puzzle.swap(Puzzle.pattern, 0, 1);
        assertEquals(state.length, 8);
        assertEquals(state[0].getValue(), 2);
        assertEquals(Puzzle.pattern[0].getValue(), 1);
        assertEquals(state[1].getValue(), 1);
        assertEquals(Puzzle.pattern[1].getValue(), 2);
    }

    @Test public void testCoincidence() {
        assertFalse(
            Puzzle.coincidence(new int[] {1, 2, 4}, new int[] {})
        );
        assertFalse(
            Puzzle.coincidence(new int[] {1, 2, 4}, new int[] {1, 2, 3})
        );
        assertTrue(
            Puzzle.coincidence(new int[] {1, 2, 3}, new int[] {1, 2, 3})
        );
    }

    @Test public void testSnapshot() {
        assertEquals(Puzzle.snapshot(new Node[] {}), "");
        assertEquals(
            Puzzle.snapshot(
                new Node[] {
                    new Node(2, new int[] {2, 0}),
                    new Node(2, new int[] {3, 4})
                }
            ),
            "22"
        );
        assertEquals(Puzzle.snapshot(Puzzle.pattern), "12340567");
    }

    @Test public void testToSeq() {
        Node[] graph = new Node[] {
            new Node(2, new int[] {1, 3}),
            new Node(100, new int[] {2, 3}),
            new Node(1, new int[] {3, 4})
        };
        int[] values = new int[] { 2, 100, 1 };
        int[] seq = Puzzle.toSeq(graph);
        for (int i = 0; i < values.length; i++) {
            assertEquals(values[i], seq[i]);
        }
    }
}
